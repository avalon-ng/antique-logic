// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function roleNum(role) {
  if (role >= 5) {
    switch (role - 5 | 0) {
      case 0 : 
          return 0;
      case 1 : 
          return 1;
      case 2 : 
          return 2;
      
    }
  } else {
    return 2;
  }
}

function cmp(r1, r2) {
  return roleNum(r1) - roleNum(r2) | 0;
}

var RoleCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var roles = /* array */[
  /* XuYuan */0,
  /* FangZhen */1,
  /* MuHuJiaNai */2,
  /* HuangYanYan */3,
  /* LaoChaoFeng */5,
  /* YaoBuRan */6,
  /* ZhengGuoQu */7,
  /* JiYunFu */4
];

var allTreasureTypes = /* array */[
  /* Rat */0,
  /* Bull */1,
  /* Tiger */2,
  /* Rabbit */3,
  /* Dragon */4,
  /* Snake */5,
  /* Horse */6,
  /* Goat */7,
  /* Monkey */8,
  /* Chicken */9,
  /* Dog */10,
  /* Pig */11
];

function treasureNum(treasure) {
  return treasure;
}

function cmp$1(r1, r2) {
  return r1 - r2 | 0;
}

var TreasureCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

var game_004 = /* roles : array */[];

var game_005 = /* players : array */[];

var game_006 = /* remainingTreasures : array */[];

var game = /* record */[
  /* phase : Preparation */0,
  /* round */0,
  /* activePlayer */0,
  /* playerCount */6,
  game_004,
  game_005,
  game_006,
  /* treasures : [] */0
];

var InitState = /* module */[/* game */game];

function meta(json) {
  return /* record */[/* playerIndex */Json_decode.field("playerIndex", Json_decode.$$int, json)];
}

function actionMeta(json) {
  return Json_decode.field("meta", meta, json);
}

function action(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "dramatic_action" : 
        return /* Dramatic */Block.__(1, [
                  Json_decode.field("a", Json_decode.$$int, json),
                  Json_decode.field("b", Json_decode.$$int, json)
                ]);
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    case "start_turn" : 
        return /* StartTurn */0;
    default:
      return undefined;
  }
}

var Decode = /* module */[
  /* meta */meta,
  /* actionMeta */actionMeta,
  /* action */action
];

function role(role$1) {
  switch (role$1) {
    case 0 : 
        return "xu_yuan";
    case 1 : 
        return "fang_zhen";
    case 2 : 
        return "mu_hu_jia_nai";
    case 3 : 
        return "huang_yan_yan";
    case 4 : 
        return "ji_yun_fu";
    case 5 : 
        return "lao_chao_feng";
    case 6 : 
        return "yao_bu_ran";
    case 7 : 
        return "zheng_guo_qu";
    
  }
}

function treasureType(t) {
  switch (t) {
    case 0 : 
        return "rat";
    case 1 : 
        return "bull";
    case 2 : 
        return "tiger";
    case 3 : 
        return "rabbit";
    case 4 : 
        return "dragon";
    case 5 : 
        return "snake";
    case 6 : 
        return "horse";
    case 7 : 
        return "goat";
    case 8 : 
        return "monkey";
    case 9 : 
        return "chicken";
    case 10 : 
        return "dog";
    case 11 : 
        return "pig";
    
  }
}

function player(player$1) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "role",
                role(player$1[/* role */0])
              ],
              /* :: */[
                /* tuple */[
                  "parternerIndex",
                  player$1[/* parternerIndex */4]
                ],
                /* [] */0
              ]
            ]);
}

function game$1(state) {
  var match = state[/* phase */0];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = "preparation";
        break;
    case 1 : 
        tmp = "turn_upkeep";
        break;
    case 2 : 
        tmp = "turn";
        break;
    case 3 : 
        tmp = "speak";
        break;
    case 4 : 
        tmp = "vote_treasure";
        break;
    case 5 : 
        tmp = "vote_result";
        break;
    case 6 : 
        tmp = "vote_role";
        break;
    case 7 : 
        tmp = "end_game";
        break;
    
  }
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "phase",
                tmp
              ],
              /* :: */[
                /* tuple */[
                  "round",
                  state[/* round */1]
                ],
                /* :: */[
                  /* tuple */[
                    "active_player",
                    state[/* activePlayer */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "roles",
                      Json_encode.array(role, state[/* roles */4])
                    ],
                    /* :: */[
                      /* tuple */[
                        "player_count",
                        state[/* playerCount */3]
                      ],
                      /* :: */[
                        /* tuple */[
                          "players",
                          Json_encode.array(player, state[/* players */5])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var Encode = /* module */[
  /* role */role,
  /* treasureType */treasureType,
  /* player */player,
  /* game */game$1
];

function reduce$prime(state, action) {
  if (typeof action === "number") {
    var match = state[/* phase */0] !== /* TurnUpkeep */1;
    if (match) {
      return state;
    } else {
      var match$1 = Belt_Array.slice(state[/* remainingTreasures */6], 0, 4);
      var tmp;
      if (match$1.length !== 4) {
        tmp = state[/* treasures */7];
      } else {
        var t1 = match$1[0];
        var t2 = match$1[1];
        var t3 = match$1[2];
        var t4 = match$1[3];
        var treasures_000 = /* record */[
          /* type_ */t1,
          /* votes : [] */0,
          /* voteDone */false,
          /* authentic */true
        ];
        var treasures_001 = /* :: */[
          /* record */[
            /* type_ */t2,
            /* votes : [] */0,
            /* voteDone */false,
            /* authentic */true
          ],
          /* :: */[
            /* record */[
              /* type_ */t3,
              /* votes : [] */0,
              /* voteDone */false,
              /* authentic */false
            ],
            /* :: */[
              /* record */[
                /* type_ */t4,
                /* votes : [] */0,
                /* voteDone */false,
                /* authentic */false
              ],
              /* [] */0
            ]
          ]
        ];
        var treasures = /* :: */[
          treasures_000,
          treasures_001
        ];
        var treasures$1 = Belt_List.sort(treasures, (function (a, b) {
                return a[/* type_ */0] - b[/* type_ */0] | 0;
              }));
        var tmp$1;
        var exit = 0;
        if (treasures$1) {
          var match$2 = treasures$1[1];
          if (match$2) {
            var match$3 = match$2[1];
            if (match$3) {
              var match$4 = match$3[1];
              if (match$4 && !match$4[1]) {
                tmp$1 = /* tuple */[
                  treasures$1[0],
                  match$2[0],
                  match$3[0],
                  match$4[0]
                ];
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          var t = /* record */[
            /* type_ : Rat */0,
            /* votes : [] */0,
            /* voteDone */true,
            /* authentic */false
          ];
          tmp$1 = /* tuple */[
            t,
            t,
            t,
            t
          ];
        }
        tmp = Belt_List.add(state[/* treasures */7], tmp$1);
      }
      return /* record */[
              /* phase : Turn */2,
              /* round */state[/* round */1] + 1 | 0,
              /* activePlayer */state[/* activePlayer */2],
              /* playerCount */state[/* playerCount */3],
              /* roles */state[/* roles */4],
              /* players */Belt_Array.map(state[/* players */5], (function (p) {
                      return /* record */[
                              /* role */p[/* role */0],
                              /* voteTokens */p[/* voteTokens */1] + 2 | 0,
                              /* drugged */p[/* drugged */2],
                              /* blind */p[/* blind */3],
                              /* parternerIndex */p[/* parternerIndex */4],
                              /* actionHistory */p[/* actionHistory */5]
                            ];
                    })),
              /* remainingTreasures */Belt_Array.slice(state[/* remainingTreasures */6], 4, 12),
              /* treasures */tmp
            ];
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var playerCount = action[0];
          var roles$1 = Belt_Array.shuffle((function (param) {
                    return Belt_Array.slice(param, 0, playerCount);
                  })(roles));
          var remainingTreasures = Belt_Array.shuffle(allTreasureTypes);
          var roleIndexes = Belt_Array.mapWithIndex(roles$1, (function (i, role) {
                  return /* tuple */[
                          role,
                          i
                        ];
                }));
          var roleMap = Belt_Map.fromArray(roleIndexes, RoleCmp);
          var players = Belt_Array.map(roles$1, (function (role) {
                  var tmp;
                  if (role >= 5) {
                    switch (role - 5 | 0) {
                      case 0 : 
                          tmp = Belt_Map.getWithDefault(roleMap, /* YaoBuRan */6, -1);
                          break;
                      case 1 : 
                          tmp = Belt_Map.getWithDefault(roleMap, /* LaoChaoFeng */5, -1);
                          break;
                      case 2 : 
                          tmp = -1;
                          break;
                      
                    }
                  } else {
                    tmp = -1;
                  }
                  return /* record */[
                          /* role */role,
                          /* voteTokens */0,
                          /* drugged */false,
                          /* blind */role === 3 || role === 2 ? Js_math.random_int(0, 3) : -1,
                          /* parternerIndex */tmp,
                          /* actionHistory : array */[]
                        ];
                }));
          return /* record */[
                  /* phase : Preparation */0,
                  /* round */0,
                  /* activePlayer */Js_math.random_int(0, playerCount),
                  /* playerCount */playerCount,
                  /* roles */roles$1,
                  /* players */players,
                  /* remainingTreasures */remainingTreasures,
                  /* treasures : [] */0
                ];
      case 1 : 
          return /* record */[
                  /* phase : VoteRole */6,
                  /* round */state[/* round */1],
                  /* activePlayer */state[/* activePlayer */2],
                  /* playerCount */Caml_int32.imul(action[0], action[1]),
                  /* roles */state[/* roles */4],
                  /* players */state[/* players */5],
                  /* remainingTreasures */state[/* remainingTreasures */6],
                  /* treasures */state[/* treasures */7]
                ];
      case 2 : 
          return state;
      
    }
  }
}

function authorized(index, state, action) {
  if (typeof action === "number") {
    return index === 0;
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return index === 0;
      case 1 : 
          return true;
      case 2 : 
          return state[/* activePlayer */2] === index;
      
    }
  }
}

function reduce(state, jsAction) {
  var playerIndex = Json_decode.field("meta", meta, jsAction)[/* playerIndex */0];
  if (state !== undefined) {
    var state$prime = state;
    var match = action(jsAction);
    if (match !== undefined) {
      var action$1 = match;
      var match$1 = authorized(playerIndex, state$prime, action$1);
      if (match$1) {
        return reduce$prime(state$prime, action$1);
      } else {
        return state$prime;
      }
    } else {
      return state$prime;
    }
  } else {
    return game;
  }
}

var toJs = game$1;

exports.RoleCmp = RoleCmp;
exports.roles = roles;
exports.allTreasureTypes = allTreasureTypes;
exports.treasureNum = treasureNum;
exports.TreasureCmp = TreasureCmp;
exports.InitState = InitState;
exports.Decode = Decode;
exports.Encode = Encode;
exports.reduce$prime = reduce$prime;
exports.authorized = authorized;
exports.reduce = reduce;
exports.toJs = toJs;
/* RoleCmp Not a pure module */
