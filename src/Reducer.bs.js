// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

var initState = /* record */[
  /* state : Init */0,
  /* nested : record */[
    /* a */0,
    /* b */0
  ],
  /* name */"just started",
  /* activePlayer */0,
  /* playerCount */6
];

function testAction(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "dramatic_action" : 
        return /* Dramatic */Block.__(2, [
                  Json_decode.field("a", Json_decode.$$int, json),
                  Json_decode.field("b", Json_decode.$$int, json)
                ]);
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    case "update_name" : 
        return /* UpdateName */Block.__(1, [Json_decode.field("name", Json_decode.string, json)]);
    default:
      return undefined;
  }
}

function gameState(json) {
  var match = Json_decode.field("state", Json_decode.string, json);
  var tmp;
  switch (match) {
    case "end" : 
        tmp = /* End */4;
        break;
    case "init" : 
        tmp = /* Init */0;
        break;
    case "turn_action" : 
        tmp = /* TurnAction */1;
        break;
    case "vote_animal" : 
        tmp = /* VoteAnimal */2;
        break;
    case "vote_player" : 
        tmp = /* VotePlayer */3;
        break;
    default:
      tmp = /* Error */5;
  }
  return /* record */[
          /* state */tmp,
          /* nested : record */[
            /* a */0,
            /* b */0
          ],
          /* name */"just started",
          /* activePlayer */Json_decode.field("activePlayer", Json_decode.$$int, json),
          /* playerCount */Json_decode.field("playerCount", Json_decode.$$int, json)
        ];
}

var Decode = /* module */[
  /* testAction */testAction,
  /* gameState */gameState
];

function gameState$1(state) {
  var match = state[/* state */0];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = "init";
        break;
    case 1 : 
        tmp = "turn_action";
        break;
    case 2 : 
        tmp = "vote_animal";
        break;
    case 3 : 
        tmp = "vote_player";
        break;
    case 4 : 
        tmp = "end";
        break;
    case 5 : 
        tmp = "error";
        break;
    
  }
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "state",
                tmp
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  state[/* name */2]
                ],
                /* :: */[
                  /* tuple */[
                    "activePlayer",
                    state[/* activePlayer */3]
                  ],
                  /* :: */[
                    /* tuple */[
                      "payload",
                      Json_encode.object_(/* :: */[
                            /* tuple */[
                              "a",
                              state[/* nested */1][/* a */0]
                            ],
                            /* :: */[
                              /* tuple */[
                                "b",
                                state[/* nested */1][/* b */1]
                              ],
                              /* [] */0
                            ]
                          ])
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

var Encode = /* module */[/* gameState */gameState$1];

var toJs = gameState$1;

var fromJs = testAction;

function reduce$prime$prime(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */[
                /* state : Init */0,
                /* nested : record */[
                  /* a */0,
                  /* b */0
                ],
                /* name */"just started",
                /* activePlayer */0,
                /* playerCount */action[0]
              ];
    case 1 : 
        return /* record */[
                /* state : TurnAction */1,
                /* nested */state[/* nested */1],
                /* name */action[0],
                /* activePlayer */state[/* activePlayer */3],
                /* playerCount */state[/* playerCount */4]
              ];
    case 2 : 
        return /* record */[
                /* state : VotePlayer */3,
                /* nested : record */[
                  /* a */Caml_int32.imul(state[/* nested */1][/* a */0] + 1 | 0, action[0]),
                  /* b */Caml_int32.imul(Caml_int32.imul(state[/* nested */1][/* b */1], action[1]) + 2 | 0, -1)
                ],
                /* name */state[/* name */2],
                /* activePlayer */state[/* activePlayer */3],
                /* playerCount */state[/* playerCount */4]
              ];
    
  }
}

function reduce$prime(state, jsAction) {
  if (state !== undefined) {
    var state$prime = state;
    var match = testAction(jsAction);
    if (match !== undefined) {
      return reduce$prime$prime(state$prime, match);
    } else {
      return state$prime;
    }
  } else {
    return initState;
  }
}

function reduce(state, jsAction) {
  var result = reduce$prime(state, jsAction);
  console.log(gameState$1(result));
  return result;
}

exports.initState = initState;
exports.Decode = Decode;
exports.Encode = Encode;
exports.toJs = toJs;
exports.fromJs = fromJs;
exports.reduce$prime$prime = reduce$prime$prime;
exports.reduce$prime = reduce$prime;
exports.reduce = reduce;
/* Json_encode Not a pure module */
