// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

var initState = /* record */[
  /* state : Init */0,
  /* nested : record */[
    /* a */0,
    /* b */0
  ],
  /* name */"just started",
  /* playerCount */6
];

function testAction(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "dramatic_action" : 
        return /* Dramatic */Block.__(2, [
                  Json_decode.field("a", Json_decode.$$int, json),
                  Json_decode.field("b", Json_decode.$$int, json)
                ]);
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    case "update_name" : 
        return /* UpdateName */Block.__(1, [Json_decode.field("name", Json_decode.string, json)]);
    default:
      return undefined;
  }
}

var Decode = /* module */[/* testAction */testAction];

function gameState(state) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "name",
                state[/* name */2]
              ],
              /* :: */[
                /* tuple */[
                  "payload",
                  Json_encode.object_(/* :: */[
                        /* tuple */[
                          "a",
                          state[/* nested */1][/* a */0]
                        ],
                        /* :: */[
                          /* tuple */[
                            "b",
                            state[/* nested */1][/* b */1]
                          ],
                          /* [] */0
                        ]
                      ])
                ],
                /* [] */0
              ]
            ]);
}

var Encode = /* module */[/* gameState */gameState];

var toJs = gameState;

var fromJs = testAction;

function reduce$prime$prime(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */[
                /* state : Init */0,
                /* nested : record */[
                  /* a */0,
                  /* b */0
                ],
                /* name */"just started",
                /* playerCount */action[0]
              ];
    case 1 : 
        return /* record */[
                /* state */state[/* state */0],
                /* nested */state[/* nested */1],
                /* name */action[0],
                /* playerCount */state[/* playerCount */3]
              ];
    case 2 : 
        return /* record */[
                /* state */state[/* state */0],
                /* nested : record */[
                  /* a */action[0] + 1 | 0,
                  /* b */(action[1] << 1)
                ],
                /* name */state[/* name */2],
                /* playerCount */state[/* playerCount */3]
              ];
    
  }
}

function reduce$prime(state, jsAction) {
  if (state !== undefined) {
    var state$prime = state;
    var match = testAction(jsAction);
    if (match !== undefined) {
      return reduce$prime$prime(state$prime, match);
    } else {
      return state$prime;
    }
  } else {
    return initState;
  }
}

function reduce(state, jsAction) {
  return gameState(reduce$prime(state, jsAction));
}

exports.initState = initState;
exports.Decode = Decode;
exports.Encode = Encode;
exports.toJs = toJs;
exports.fromJs = fromJs;
exports.reduce$prime$prime = reduce$prime$prime;
exports.reduce$prime = reduce$prime;
exports.reduce = reduce;
/* Json_encode Not a pure module */
