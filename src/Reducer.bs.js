// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function roleNum(role) {
  if (role >= 5) {
    switch (role - 5 | 0) {
      case 0 : 
          return 0;
      case 1 : 
          return 1;
      case 2 : 
          return 2;
      
    }
  } else {
    return 2;
  }
}

function cmp(r1, r2) {
  return roleNum(r1) - roleNum(r2) | 0;
}

var RoleCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var roles = /* array */[
  /* XuYuan */0,
  /* FangZhen */1,
  /* MuHuJiaNai */2,
  /* HuangYanYan */3,
  /* LaoChaoFeng */5,
  /* YaoBuRan */6,
  /* ZhengGuoQu */7,
  /* JiYunFu */4
];

var game_001 = /* nested : record */[
  /* a */0,
  /* b */0
];

var game_004 = /* roles : array */[];

var game_005 = /* players : array */[];

var game = /* record */[
  /* state : Init */0,
  game_001,
  /* activePlayer */0,
  /* playerCount */6,
  game_004,
  game_005
];

var InitState = /* module */[/* game */game];

function action(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "dramatic_action" : 
        return /* Dramatic */Block.__(1, [
                  Json_decode.field("a", Json_decode.$$int, json),
                  Json_decode.field("b", Json_decode.$$int, json)
                ]);
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    default:
      return undefined;
  }
}

var Decode = /* module */[/* action */action];

function role(role$1) {
  switch (role$1) {
    case 0 : 
        return "xu_yuan";
    case 1 : 
        return "fang_zhen";
    case 2 : 
        return "mu_hu_jia_nai";
    case 3 : 
        return "huang_yan_yan";
    case 4 : 
        return "ji_yun_fu";
    case 5 : 
        return "lao_chao_feng";
    case 6 : 
        return "yao_bu_ran";
    case 7 : 
        return "zheng_guo_qu";
    
  }
}

function player(player$1) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "role",
                role(player$1[/* role */0])
              ],
              /* :: */[
                /* tuple */[
                  "drugged",
                  player$1[/* drugged */1]
                ],
                /* :: */[
                  /* tuple */[
                    "parternerIndex",
                    player$1[/* parternerIndex */2]
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function game$1(state) {
  var match = state[/* state */0];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = "init";
        break;
    case 1 : 
        tmp = "turn_action";
        break;
    case 2 : 
        tmp = "vote_zodiac";
        break;
    case 3 : 
        tmp = "vote_player";
        break;
    case 4 : 
        tmp = "end";
        break;
    
  }
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "state",
                tmp
              ],
              /* :: */[
                /* tuple */[
                  "activePlayer",
                  state[/* activePlayer */2]
                ],
                /* :: */[
                  /* tuple */[
                    "roles",
                    Json_encode.array(role, state[/* roles */4])
                  ],
                  /* :: */[
                    /* tuple */[
                      "players",
                      Json_encode.array(player, state[/* players */5])
                    ],
                    /* :: */[
                      /* tuple */[
                        "payload",
                        Json_encode.object_(/* :: */[
                              /* tuple */[
                                "a",
                                state[/* nested */1][/* a */0]
                              ],
                              /* :: */[
                                /* tuple */[
                                  "b",
                                  state[/* nested */1][/* b */1]
                                ],
                                /* [] */0
                              ]
                            ])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

var Encode = /* module */[
  /* role */role,
  /* player */player,
  /* game */game$1
];

function reduce$prime(state, action) {
  if (action.tag) {
    return /* record */[
            /* state : VotePlayer */3,
            /* nested : record */[
              /* a */Caml_int32.imul(state[/* nested */1][/* a */0] + 1 | 0, action[0]),
              /* b */Caml_int32.imul(Caml_int32.imul(state[/* nested */1][/* b */1], action[1]) + 2 | 0, -1)
            ],
            /* activePlayer */state[/* activePlayer */2],
            /* playerCount */state[/* playerCount */3],
            /* roles */state[/* roles */4],
            /* players */state[/* players */5]
          ];
  } else {
    var playerCount = action[0];
    var roles$1 = Belt_Array.shuffle((function (param) {
              return Belt_Array.slice(param, 0, playerCount);
            })(roles));
    var roleIndexes = Belt_Array.mapWithIndex(roles$1, (function (i, role) {
            return /* tuple */[
                    role,
                    i
                  ];
          }));
    var roleMap = Belt_Map.fromArray(roleIndexes, RoleCmp);
    var players = Belt_Array.map(roles$1, (function (role) {
            var tmp;
            if (role >= 5) {
              switch (role - 5 | 0) {
                case 0 : 
                    tmp = Belt_Map.getWithDefault(roleMap, /* YaoBuRan */6, -1);
                    break;
                case 1 : 
                    tmp = Belt_Map.getWithDefault(roleMap, /* LaoChaoFeng */5, -1);
                    break;
                case 2 : 
                    tmp = -1;
                    break;
                
              }
            } else {
              tmp = -1;
            }
            return /* record */[
                    /* role */role,
                    /* drugged */false,
                    /* parternerIndex */tmp,
                    /* actionHistory : array */[]
                  ];
          }));
    return /* record */[
            /* state : Init */0,
            /* nested : record */[
              /* a */0,
              /* b */0
            ],
            /* activePlayer */Js_math.random_int(0, playerCount),
            /* playerCount */playerCount,
            /* roles */roles$1,
            /* players */players
          ];
  }
}

function reduce(state, jsAction) {
  if (state !== undefined) {
    var state$prime = state;
    var match = action(jsAction);
    if (match !== undefined) {
      return reduce$prime(state$prime, match);
    } else {
      return state$prime;
    }
  } else {
    return game;
  }
}

var toJs = game$1;

exports.RoleCmp = RoleCmp;
exports.roles = roles;
exports.InitState = InitState;
exports.Decode = Decode;
exports.Encode = Encode;
exports.reduce$prime = reduce$prime;
exports.reduce = reduce;
exports.toJs = toJs;
/* RoleCmp Not a pure module */
