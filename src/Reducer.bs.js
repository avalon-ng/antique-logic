// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function roleNum(role) {
  if (role >= 5) {
    switch (role - 5 | 0) {
      case 0 : 
          return 0;
      case 1 : 
          return 1;
      case 2 : 
          return 2;
      
    }
  } else {
    return 2;
  }
}

function cmp(r1, r2) {
  return roleNum(r1) - roleNum(r2) | 0;
}

var RoleCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var roles = /* array */[
  /* XuYuan */0,
  /* FangZhen */1,
  /* MuHuJiaNai */2,
  /* HuangYanYan */3,
  /* LaoChaoFeng */5,
  /* YaoBuRan */6,
  /* ZhengGuoQu */7,
  /* JiYunFu */4
];

var allTreasureTypes = /* array */[
  /* Rat */0,
  /* Bull */1,
  /* Tiger */2,
  /* Rabbit */3,
  /* Dragon */4,
  /* Snake */5,
  /* Horse */6,
  /* Goat */7,
  /* Monkey */8,
  /* Chicken */9,
  /* Dog */10,
  /* Pig */11
];

function treasureNum(treasure) {
  return treasure;
}

function cmp$1(r1, r2) {
  return r1 - r2 | 0;
}

var TreasureCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

var game_004 = /* roles : array */[];

var game_005 = /* players : array */[];

var game_008 = /* remainingTreasures : array */[];

var game = /* record */[
  /* phase : Preparation */0,
  /* round */0,
  /* activePlayer */0,
  /* playerCount */6,
  game_004,
  game_005,
  /* resultReversed */false,
  /* resultUnknown */-1,
  game_008,
  /* treasures : [] */0
];

var InitState = /* module */[/* game */game];

function identifyTreasure(param, treasures, player, treasureIndex) {
  var resultReversed = param[/* resultReversed */6];
  var match = Belt_List.get(treasures, treasureIndex);
  if (match !== undefined) {
    var treasure = match;
    var match$1 = player[/* role */0];
    if (match$1 !== 4) {
      if (match$1 >= 5) {
        var match$2 = treasure[/* authentic */3];
        if (match$2) {
          return /* Authentic */0;
        } else {
          return /* Fake */1;
        }
      } else {
        var match$3 = param[/* resultUnknown */7] === treasureIndex;
        if (match$3) {
          return /* Unknown */2;
        } else {
          var match$4 = player[/* role */0];
          var exit = 0;
          switch (match$4) {
            case 0 : 
                if (resultReversed) {
                  var match$5 = treasure[/* authentic */3];
                  if (match$5) {
                    return /* Fake */1;
                  } else {
                    return /* Authentic */0;
                  }
                } else {
                  var match$6 = treasure[/* authentic */3];
                  if (match$6) {
                    return /* Authentic */0;
                  } else {
                    return /* Fake */1;
                  }
                }
            case 2 : 
            case 3 : 
                exit = 1;
                break;
            case 1 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
                return /* Unknown */2;
            
          }
          if (exit === 1) {
            var match$7 = player[/* blind */3] === param[/* round */1];
            if (match$7) {
              return /* Unknown */2;
            } else if (resultReversed) {
              var match$8 = treasure[/* authentic */3];
              if (match$8) {
                return /* Fake */1;
              } else {
                return /* Authentic */0;
              }
            } else {
              var match$9 = treasure[/* authentic */3];
              if (match$9) {
                return /* Authentic */0;
              } else {
                return /* Fake */1;
              }
            }
          }
          
        }
      }
    } else {
      var match$10 = treasure[/* authentic */3];
      if (match$10) {
        return /* Authentic */0;
      } else {
        return /* Fake */1;
      }
    }
  } else {
    return /* Unknown */2;
  }
}

function meta(json) {
  return /* record */[/* playerIndex */Json_decode.field("playerIndex", Json_decode.$$int, json)];
}

function actionMeta(json) {
  return Json_decode.field("meta", meta, json);
}

function action(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    case "prepare_turn" : 
        return /* PrepareTurn */0;
    case "start_turn" : 
        return /* StartTurn */1;
    case "turn_action" : 
        var match$1 = Json_decode.field("action", Json_decode.string, json);
        var tmp = match$1 === "identify_treasure" ? /* IdentifyTreasure */[
            Json_decode.field("index", Json_decode.$$int, json),
            /* Unknown */2
          ] : /* Nop */0;
        return /* TurnAction */Block.__(1, [tmp]);
    default:
      return undefined;
  }
}

var Decode = /* module */[
  /* meta */meta,
  /* actionMeta */actionMeta,
  /* action */action
];

function role(role$1) {
  switch (role$1) {
    case 0 : 
        return "xu_yuan";
    case 1 : 
        return "fang_zhen";
    case 2 : 
        return "mu_hu_jia_nai";
    case 3 : 
        return "huang_yan_yan";
    case 4 : 
        return "ji_yun_fu";
    case 5 : 
        return "lao_chao_feng";
    case 6 : 
        return "yao_bu_ran";
    case 7 : 
        return "zheng_guo_qu";
    
  }
}

function treasureType(t) {
  switch (t) {
    case 0 : 
        return "rat";
    case 1 : 
        return "bull";
    case 2 : 
        return "tiger";
    case 3 : 
        return "rabbit";
    case 4 : 
        return "dragon";
    case 5 : 
        return "snake";
    case 6 : 
        return "horse";
    case 7 : 
        return "goat";
    case 8 : 
        return "monkey";
    case 9 : 
        return "chicken";
    case 10 : 
        return "dog";
    case 11 : 
        return "pig";
    
  }
}

function treasureState(s) {
  switch (s) {
    case 0 : 
        return "real";
    case 1 : 
        return "fake";
    case 2 : 
        return "unknown";
    
  }
}

function actionHistory(turnAction) {
  if (turnAction) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "index",
                  turnAction[0]
                ],
                /* :: */[
                  /* tuple */[
                    "state",
                    treasureState(turnAction[1])
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return "nop";
  }
}

function player(player$1) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "role",
                role(player$1[/* role */0])
              ],
              /* :: */[
                /* tuple */[
                  "parternerIndex",
                  player$1[/* parternerIndex */4]
                ],
                /* :: */[
                  /* tuple */[
                    "actionHistory",
                    Json_encode.array(actionHistory, player$1[/* actionHistory */5])
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function game$1(state) {
  var match = state[/* phase */0];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = "preparation";
        break;
    case 1 : 
        tmp = "turn_upkeep";
        break;
    case 2 : 
        tmp = "turn";
        break;
    case 3 : 
        tmp = "speak";
        break;
    case 4 : 
        tmp = "vote_treasure";
        break;
    case 5 : 
        tmp = "vote_result";
        break;
    case 6 : 
        tmp = "vote_role";
        break;
    case 7 : 
        tmp = "end_game";
        break;
    
  }
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "phase",
                tmp
              ],
              /* :: */[
                /* tuple */[
                  "round",
                  state[/* round */1]
                ],
                /* :: */[
                  /* tuple */[
                    "active_player",
                    state[/* activePlayer */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "roles",
                      Json_encode.array(role, state[/* roles */4])
                    ],
                    /* :: */[
                      /* tuple */[
                        "player_count",
                        state[/* playerCount */3]
                      ],
                      /* :: */[
                        /* tuple */[
                          "players",
                          Json_encode.array(player, state[/* players */5])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var Encode = /* module */[
  /* role */role,
  /* treasureType */treasureType,
  /* treasureState */treasureState,
  /* actionHistory */actionHistory,
  /* player */player,
  /* game */game$1
];

function reduce$prime(playerIndex, state, action) {
  if (typeof action === "number") {
    if (action === 0) {
      return /* record */[
              /* phase : TurnUpkeep */1,
              /* round */state[/* round */1],
              /* activePlayer */state[/* activePlayer */2],
              /* playerCount */state[/* playerCount */3],
              /* roles */state[/* roles */4],
              /* players */state[/* players */5],
              /* resultReversed */state[/* resultReversed */6],
              /* resultUnknown */state[/* resultUnknown */7],
              /* remainingTreasures */state[/* remainingTreasures */8],
              /* treasures */state[/* treasures */9]
            ];
    } else {
      var match = Belt_Array.slice(state[/* remainingTreasures */8], 0, 4);
      var tmp;
      if (match.length !== 4) {
        tmp = state[/* treasures */9];
      } else {
        var t1 = match[0];
        var t2 = match[1];
        var t3 = match[2];
        var t4 = match[3];
        var treasures_000 = /* record */[
          /* type_ */t1,
          /* votes : [] */0,
          /* voteDone */false,
          /* authentic */true
        ];
        var treasures_001 = /* :: */[
          /* record */[
            /* type_ */t2,
            /* votes : [] */0,
            /* voteDone */false,
            /* authentic */true
          ],
          /* :: */[
            /* record */[
              /* type_ */t3,
              /* votes : [] */0,
              /* voteDone */false,
              /* authentic */false
            ],
            /* :: */[
              /* record */[
                /* type_ */t4,
                /* votes : [] */0,
                /* voteDone */false,
                /* authentic */false
              ],
              /* [] */0
            ]
          ]
        ];
        var treasures = /* :: */[
          treasures_000,
          treasures_001
        ];
        tmp = Belt_List.add(state[/* treasures */9], Belt_List.sort(treasures, (function (a, b) {
                    return a[/* type_ */0] - b[/* type_ */0] | 0;
                  })));
      }
      return /* record */[
              /* phase */(console.log("start turn"), /* Turn */2),
              /* round */state[/* round */1] + 1 | 0,
              /* activePlayer */state[/* activePlayer */2],
              /* playerCount */state[/* playerCount */3],
              /* roles */state[/* roles */4],
              /* players */Belt_Array.map(state[/* players */5], (function (p) {
                      return /* record */[
                              /* role */p[/* role */0],
                              /* voteTokens */p[/* voteTokens */1] + 2 | 0,
                              /* drugged */p[/* drugged */2],
                              /* blind */p[/* blind */3],
                              /* parternerIndex */p[/* parternerIndex */4],
                              /* actionHistory */p[/* actionHistory */5]
                            ];
                    })),
              /* resultReversed */false,
              /* resultUnknown */-1,
              /* remainingTreasures */Belt_Array.slice(state[/* remainingTreasures */8], 4, 12),
              /* treasures */tmp
            ];
    }
  } else if (action.tag) {
    var action$1 = action[0];
    if (action$1) {
      var index = action$1[0];
      return /* record */[
              /* phase */state[/* phase */0],
              /* round */state[/* round */1],
              /* activePlayer */state[/* activePlayer */2],
              /* playerCount */state[/* playerCount */3],
              /* roles */state[/* roles */4],
              /* players */Belt_Array.mapWithIndex(state[/* players */5], (function (i, p) {
                      var match = i !== playerIndex;
                      if (match) {
                        return p;
                      } else {
                        var match$1 = Belt_List.get(state[/* treasures */9], state[/* round */1] - 1 | 0);
                        return /* record */[
                                /* role */p[/* role */0],
                                /* voteTokens */p[/* voteTokens */1],
                                /* drugged */p[/* drugged */2],
                                /* blind */p[/* blind */3],
                                /* parternerIndex */p[/* parternerIndex */4],
                                /* actionHistory */Belt_Array.concat(p[/* actionHistory */5], /* array */[/* IdentifyTreasure */[
                                        index,
                                        identifyTreasure(state, match$1 !== undefined ? match$1 : /* [] */0, p, index)
                                      ]])
                              ];
                      }
                    })),
              /* resultReversed */state[/* resultReversed */6],
              /* resultUnknown */state[/* resultUnknown */7],
              /* remainingTreasures */state[/* remainingTreasures */8],
              /* treasures */state[/* treasures */9]
            ];
    } else {
      return state;
    }
  } else {
    var playerCount = action[0];
    var roles$1 = Belt_Array.shuffle((function (param) {
              return Belt_Array.slice(param, 0, playerCount);
            })(roles));
    var remainingTreasures = Belt_Array.shuffle(allTreasureTypes);
    var roleIndexes = Belt_Array.mapWithIndex(roles$1, (function (i, role) {
            return /* tuple */[
                    role,
                    i
                  ];
          }));
    var roleMap = Belt_Map.fromArray(roleIndexes, RoleCmp);
    var players = Belt_Array.map(roles$1, (function (role) {
            var tmp;
            if (role >= 5) {
              switch (role - 5 | 0) {
                case 0 : 
                    tmp = Belt_Map.getWithDefault(roleMap, /* YaoBuRan */6, -1);
                    break;
                case 1 : 
                    tmp = Belt_Map.getWithDefault(roleMap, /* LaoChaoFeng */5, -1);
                    break;
                case 2 : 
                    tmp = -1;
                    break;
                
              }
            } else {
              tmp = -1;
            }
            return /* record */[
                    /* role */role,
                    /* voteTokens */0,
                    /* drugged */false,
                    /* blind */role === 3 || role === 2 ? Js_math.random_int(1, 4) : -1,
                    /* parternerIndex */tmp,
                    /* actionHistory : array */[]
                  ];
          }));
    return /* record */[
            /* phase : Preparation */0,
            /* round */0,
            /* activePlayer */Js_math.random_int(0, playerCount),
            /* playerCount */playerCount,
            /* roles */roles$1,
            /* players */players,
            /* resultReversed */false,
            /* resultUnknown */-1,
            /* remainingTreasures */remainingTreasures,
            /* treasures : [] */0
          ];
  }
}

function authorized(playerIndex, state, action) {
  if (typeof action === "number" || action.tag !== 1) {
    return playerIndex === 0;
  } else {
    return state[/* activePlayer */2] === playerIndex;
  }
}

function validate(state, action) {
  if (typeof action === "number" && action !== 0) {
    return state[/* phase */0] === /* TurnUpkeep */1;
  } else {
    return true;
  }
}

function reduce(state, jsAction) {
  var playerIndex = Json_decode.field("meta", meta, jsAction)[/* playerIndex */0];
  if (state !== undefined) {
    var state$1 = state;
    var match = action(jsAction);
    if (match !== undefined) {
      var action$1 = match;
      var match$1 = authorized(playerIndex, state$1, action$1) && validate(state$1, action$1);
      if (match$1) {
        return reduce$prime(playerIndex, state$1, action$1);
      } else {
        return state$1;
      }
    } else {
      return state$1;
    }
  } else {
    return game;
  }
}

var toJs = game$1;

exports.RoleCmp = RoleCmp;
exports.roles = roles;
exports.allTreasureTypes = allTreasureTypes;
exports.treasureNum = treasureNum;
exports.TreasureCmp = TreasureCmp;
exports.InitState = InitState;
exports.identifyTreasure = identifyTreasure;
exports.Decode = Decode;
exports.Encode = Encode;
exports.reduce$prime = reduce$prime;
exports.authorized = authorized;
exports.validate = validate;
exports.reduce = reduce;
exports.toJs = toJs;
/* RoleCmp Not a pure module */
