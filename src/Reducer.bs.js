// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function roleNum(role) {
  if (role >= 5) {
    switch (role - 5 | 0) {
      case 0 : 
          return 0;
      case 1 : 
          return 1;
      case 2 : 
          return 2;
      
    }
  } else {
    return 2;
  }
}

function cmp(r1, r2) {
  return roleNum(r1) - roleNum(r2) | 0;
}

var RoleCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var roles = /* array */[
  /* XuYuan */0,
  /* FangZhen */1,
  /* MuHuJiaNai */2,
  /* HuangYanYan */3,
  /* LaoChaoFeng */5,
  /* YaoBuRan */6,
  /* ZhengGuoQu */7,
  /* JiYunFu */4
];

var game_003 = /* roles : array */[];

var game_004 = /* players : array */[];

var game = /* record */[
  /* phase : Preparation */0,
  /* activePlayer */0,
  /* playerCount */6,
  game_003,
  game_004
];

var InitState = /* module */[/* game */game];

function meta(json) {
  return /* record */[/* playerIndex */Json_decode.field("playerIndex", Json_decode.$$int, json)];
}

function actionMeta(json) {
  return Json_decode.field("meta", meta, json);
}

function action(json) {
  var match = Json_decode.field("type", Json_decode.string, json);
  switch (match) {
    case "dramatic_action" : 
        return /* Dramatic */Block.__(1, [
                  Json_decode.field("a", Json_decode.$$int, json),
                  Json_decode.field("b", Json_decode.$$int, json)
                ]);
    case "init" : 
        return /* Init */Block.__(0, [Json_decode.field("playerCount", Json_decode.$$int, json)]);
    default:
      return undefined;
  }
}

var Decode = /* module */[
  /* meta */meta,
  /* actionMeta */actionMeta,
  /* action */action
];

function role(role$1) {
  switch (role$1) {
    case 0 : 
        return "xu_yuan";
    case 1 : 
        return "fang_zhen";
    case 2 : 
        return "mu_hu_jia_nai";
    case 3 : 
        return "huang_yan_yan";
    case 4 : 
        return "ji_yun_fu";
    case 5 : 
        return "lao_chao_feng";
    case 6 : 
        return "yao_bu_ran";
    case 7 : 
        return "zheng_guo_qu";
    
  }
}

function player(player$1) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "role",
                role(player$1[/* role */0])
              ],
              /* :: */[
                /* tuple */[
                  "drugged",
                  player$1[/* drugged */1]
                ],
                /* :: */[
                  /* tuple */[
                    "parternerIndex",
                    player$1[/* parternerIndex */3]
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function game$1(state) {
  var match = state[/* phase */0];
  var tmp;
  switch (match) {
    case 0 : 
        tmp = "preparation";
        break;
    case 1 : 
        tmp = "turn_upkeep";
        break;
    case 2 : 
        tmp = "turn";
        break;
    case 3 : 
        tmp = "speak";
        break;
    case 4 : 
        tmp = "vote_treasure";
        break;
    case 5 : 
        tmp = "vote_result";
        break;
    case 6 : 
        tmp = "vote_role";
        break;
    case 7 : 
        tmp = "end_game";
        break;
    
  }
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "phase",
                tmp
              ],
              /* :: */[
                /* tuple */[
                  "active_player",
                  state[/* activePlayer */1]
                ],
                /* :: */[
                  /* tuple */[
                    "roles",
                    Json_encode.array(role, state[/* roles */3])
                  ],
                  /* :: */[
                    /* tuple */[
                      "player_count",
                      state[/* playerCount */2]
                    ],
                    /* :: */[
                      /* tuple */[
                        "players",
                        Json_encode.array(player, state[/* players */4])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

var Encode = /* module */[
  /* role */role,
  /* player */player,
  /* game */game$1
];

function reduce$prime(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        var playerCount = action[0];
        var roles$1 = Belt_Array.shuffle((function (param) {
                  return Belt_Array.slice(param, 0, playerCount);
                })(roles));
        var roleIndexes = Belt_Array.mapWithIndex(roles$1, (function (i, role) {
                return /* tuple */[
                        role,
                        i
                      ];
              }));
        var roleMap = Belt_Map.fromArray(roleIndexes, RoleCmp);
        var players = Belt_Array.map(roles$1, (function (role) {
                var tmp;
                if (role >= 5) {
                  switch (role - 5 | 0) {
                    case 0 : 
                        tmp = Belt_Map.getWithDefault(roleMap, /* YaoBuRan */6, -1);
                        break;
                    case 1 : 
                        tmp = Belt_Map.getWithDefault(roleMap, /* LaoChaoFeng */5, -1);
                        break;
                    case 2 : 
                        tmp = -1;
                        break;
                    
                  }
                } else {
                  tmp = -1;
                }
                return /* record */[
                        /* role */role,
                        /* drugged */false,
                        /* blind */role === 3 || role === 2 ? Js_math.random_int(0, 3) : -1,
                        /* parternerIndex */tmp,
                        /* actionHistory : array */[]
                      ];
              }));
        return /* record */[
                /* phase : Preparation */0,
                /* activePlayer */Js_math.random_int(0, playerCount),
                /* playerCount */playerCount,
                /* roles */roles$1,
                /* players */players
              ];
    case 1 : 
        return /* record */[
                /* phase : VoteRole */6,
                /* activePlayer */state[/* activePlayer */1],
                /* playerCount */Caml_int32.imul(action[0], action[1]),
                /* roles */state[/* roles */3],
                /* players */state[/* players */4]
              ];
    case 2 : 
        return state;
    
  }
}

function authorized(index, state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return index === 0;
    case 1 : 
        return true;
    case 2 : 
        return state[/* activePlayer */1] === index;
    
  }
}

function reduce(state, jsAction) {
  var playerIndex = Json_decode.field("meta", meta, jsAction)[/* playerIndex */0];
  if (state !== undefined) {
    var state$prime = state;
    var match = action(jsAction);
    if (match !== undefined) {
      var action$1 = match;
      var match$1 = authorized(playerIndex, state$prime, action$1);
      if (match$1) {
        return reduce$prime(state$prime, action$1);
      } else {
        return state$prime;
      }
    } else {
      return state$prime;
    }
  } else {
    return game;
  }
}

var toJs = game$1;

exports.RoleCmp = RoleCmp;
exports.roles = roles;
exports.InitState = InitState;
exports.Decode = Decode;
exports.Encode = Encode;
exports.reduce$prime = reduce$prime;
exports.authorized = authorized;
exports.reduce = reduce;
exports.toJs = toJs;
/* RoleCmp Not a pure module */
